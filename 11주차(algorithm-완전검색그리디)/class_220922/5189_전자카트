# 1
# def perm(i, k):
#     if i == k:  # 인덱스 i == 원소의 개수
#         a = [0] + p[:] + [0]
#         ans.append(a)
#     else:
#         for j in range(i, k):
#             p[i], p[j] = p[j], p[i]
#             perm(i + 1, k)
#             p[i], p[j] = p[j], p[i]
#
#
# T = int(input())
#
# for tc in range(1, T + 1):
#     N = int(input())
#     data = [list(map(int, input().split())) for _ in range(N)]
#
#     min = 99999
#     p = []
#
#     for i in range(1, N):
#         p.append(i)
#     ans = []
#     perm(0, N - 1)
#
#     for i in range(len(ans)):
#         sum = 0
#         for j in range(len(ans[i]) - 1):
#             sum += data[ans[i][j]][ans[i][j + 1]]
#         if sum < min:
#             min = sum
#     print(f'#{tc} {min}')


# 2
# def patrol(now, e_sum):
#     global min_value
#
#     # 지금 구한 합이 내가 알고있는 최소값보다 크면 더이상 진행할 필요가 없다.
#     if e_sum > min_value:
#         return
#
#     # 모든 방을 다 방문했으면 시작지점으로 돌아간다
#     # 시작지점까지 걸리는 양을 추가해서 최소값을 계산
#     if 0 not in visit:
#         min_value = min(min_value, e_sum+e[now][0])
#         return
#
#     # 현재 위치에서 갈수 있는 다음 방을 탐색
#     for next_room in range(N):
#         if next_room != now and visit[next_room] == 0:
#             # 다음 방으로 갔다고 체크하고 길을 찾는다.
#             visit[next_room] = 1
#             # 합을 최신화 한 다음 재귀 호출
#             patrol(next_room, e_sum + e[now][next_room])
#             # 방문 체크 해제하고 다른 길이 있나 찾아보기
#             visit[next_room] = 0
#
#
# T = int(input())
# for tc in range(1, T+1):
#     n = int(input())
#
#     e = [list(map(int,input().split())) for _ in range(n)]
#     visit = [0] * n
#     # 처음 방은 출발 이후에 다시 돌아오면 안되니까
#     # 마지막 방을 방문한 이후에만 돌아올수 있다.
#     visit[0] = 1
#
#     min_value = 10000
#     patrol(0,0)
#     print(f'#{tc} {min_value}')

